name: Blue-Green Deployment

on:
  push:
    branches:
      - main

env:
  KUBECONFIG: ${{ secrets.KUBECONFIG }}
  HELM_RELEASE_NAME: nodejs-app
  HELM_CHART_PATH: ./nodejs-chart

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # Set up Helm
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      # Authenticate to the Kubernetes cluster
      - name: Authenticate to Cluster
        run: |
          echo "${KUBECONFIG}" > kubeconfig
          export KUBECONFIG=kubeconfig

      # Helm linting and chart packaging
      - name: Lint Helm Chart
        run: helm lint ${{ env.HELM_CHART_PATH }}

      # Check if ConfigMap exists
      - name: Check ConfigMap
        id: check-configmap
        run: |
          if kubectl get configmap active-version; then
            ACTIVE_VERSION=$(kubectl get configmap active-version -o jsonpath='{.data.version}')
          else
            ACTIVE_VERSION="blue"
          fi
          echo "ACTIVE_VERSION=$ACTIVE_VERSION" >> $GITHUB_ENV
          echo "Current Active Version: $ACTIVE_VERSION"

      # Deploy application
      - name: Deploy Application
        run: |
          helm upgrade --install ${{ env.HELM_RELEASE_NAME }} ${{ env.HELM_CHART_PATH }} \
            --set activeVersion=${{ env.ACTIVE_VERSION }} \
            --wait

      # Switch traffic to the other version
      - name: Switch Traffic Version
        run: |
          if [ "${{ env.ACTIVE_VERSION }}" == "blue" ]; then
            echo "Switching traffic to green..."
            helm upgrade ${{ env.HELM_RELEASE_NAME }} ${{ env.HELM_CHART_PATH }} \
              --set activeVersion=green \
              --wait
            kubectl create configmap active-version --from-literal=version=green --dry-run=client -o yaml | kubectl apply -f -
          else
            echo "Switching traffic to blue..."
            helm upgrade ${{ env.HELM_RELEASE_NAME }} ${{ env.HELM_CHART_PATH }} \
              --set activeVersion=blue \
              --wait
            kubectl create configmap active-version --from-literal=version=blue --dry-run=client -o yaml | kubectl apply -f -
          fi

      # Test the deployment
      - name: Test Deployed Application
        run: |
          kubectl get all -l app=nodejs
          kubectl get services -o wide
