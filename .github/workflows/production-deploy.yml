name: Blue-Green Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

env:
  KUBECONFIG: ${{ secrets.KUBECONFIG }}
  HELM_RELEASE_NAME: nodejs-app
  HELM_CHART_PATH: ./nodejs-helm

jobs:
  # build-and-test:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Set up Node.js
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '22'

  #     - name: Install dependencies
  #       run: npm install

  #     - name: Run tests
  #       run: npm run test

  #     - name: Build the application
  #       run: npm run build

  # build-and-push:
  #   runs-on: ubuntu-latest
  #   needs: build-and-test

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Log in to Docker Hub
  #       run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

  #     - name: Build Docker image
  #       run: |
  #         docker build -t ${{ secrets.DOCKER_USERNAME }}/nodejs:latest .

  #     - name: Push Docker image
  #       run: |
  #         docker push ${{ secrets.DOCKER_USERNAME }}/nodejs:latest

  deploy:
    runs-on: ubuntu-latest
    # needs: build-and-push
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ secrets.PRODUCTION_CLUSTER }}

      - name: Determine Active Deployment
        id: active-env
        run: |
          ACTIVE_ENV=$(kubectl get svc nodejs-app -o=jsonpath='{.spec.selector.color}')
          if [ "$ACTIVE_ENV" == "blue" ]; then
            echo "inactive_env=green" >> $GITHUB_ENV
          elif [ "$ACTIVE_ENV" == "green" ]; then
            echo "inactive_env=blue" >> $GITHUB_ENV
          else
            echo "Error: Unable to determine active environment."
            exit 1
          fi

      - name: Deploy to Inactive Environment
        run: |
          echo "Deploying to the inactive environment: ${{ env.inactive_env }}."
          if [ "${{ env.inactive_env }}" == "blue" ]; then
            kubectl apply -f ./deployment-blue.yaml
          elif [ "${{ env.inactive_env }}" == "green" ]; then
            kubectl apply -f ./deployment-green.yaml
          fi

      - name: Verify Deployment
        run: |
          echo "Verifying the deployment to ${{ env.inactive_env }}..."
          kubectl rollout status deployment/nodejs-app-${{ env.inactive_env }}

      - name: Switch Traffic
        run: |
          echo "Switching traffic to ${{ env.inactive_env }}..."
          kubectl patch svc nodejs-app -p '{"spec":{"selector":{"color":"'${{ env.inactive_env }}'"}}}'

      - name: Clean Up Old Deployment
        run: |
          echo "Cleaning up the old deployment..."
          if [ "${{ env.inactive_env }}" == "blue" ]; then
            kubectl delete deployment nodejs-app-green || echo "No green deployment to delete."
          elif [ "${{ env.inactive_env }}" == "green" ]; then
            kubectl delete deployment nodejs-app-blue || echo "No blue deployment to delete."
          fi
